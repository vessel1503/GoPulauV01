@model GoPulauV01.Models.CustomRegisterModel

@{
	ViewBag.Title = "Register";
}

<hgroup class="title">
	<h1>@ViewBag.Title.</h1>
	<h2>Create a new account.</h2>
</hgroup>

<fieldset>
	<legend>Registration Form</legend>
	<div class="register-form">
		<div class="data-row">
			<div class="data-column-title">
				@Html.LabelFor(m => m.MemberModel.Name)
			</div>
			<div class="data-column-input">
				@Html.TextBoxFor(m => m.MemberModel.Name, new { id = "txtMemberName", @placeholder = "@Example: Steve Job" })
			</div>                
		</div>
		<div class="data-row invisible-default" id="warningMemberName">
			<div class="data-column-title">
			</div>
			<div class="data-column-input-warning" id="warningMemberNameMessage">
			</div>
		</div>
		<div class="data-row">
			<div class="data-column-title">
				@Html.LabelFor(m => m.MemberModel.Ic_Passport)
			</div>
			<div class="data-column-input">
				@Html.TextBoxFor(m => m.MemberModel.Ic_Passport, new { @id = "txtMemberIcPassport", @placeholder = "@Example: 990123-10-1234" })
			</div>                
		</div>
		<div class="data-row invisible-default" id="warningMemberIcPassport">
			<div class="data-column-title">
			</div>
			<div class="data-column-input-warning" id="warningMemberIcPassportMessage">
			</div>
		</div>
		<div class="data-row">
			<div class="data-column-title">
				@Html.LabelFor(m => m.MemberModel.Gender)
			</div>
			<div class="data-column-input">
				@Html.RadioButtonFor(m => m.MemberModel.Gender, "M", new { id = "radMemberGenderMale", @class = "radio-member-gender", name = "gender", Checked = "checked" })
				@Html.Label("radMemberGenderMale", "Male")
				@Html.RadioButtonFor(m => m.MemberModel.Gender, "F", new { id = "radMemberGenderFemale", @class = "radio-member-gender", name="gender" })
				@Html.Label("radMemberGenderFemale", "Female")
			</div>                
		</div>
		<div class="data-row">
			<div class="data-column-title">
				@Html.LabelFor(m => m.MemberModel.Dob)
			</div>
			<div class="data-column-input">
				@Html.TextBoxFor(m => m.MemberModel.Dob, new { @id = "txtMemberDob", @placeholder = "@Example: DD/MM/YYYY" })
			</div>                
		</div>
		<div class="data-row invisible-default" id="warningMemberDob">
			<div class="data-column-title">
			</div>
			<div class="data-column-input-warning" id="warningMemberDobMessage">
			</div>
		</div>
		<div class="data-row">
			<div class="data-column-title">
				@Html.LabelFor(m => m.MemberModel.Race)
			</div>
			<div class="data-column-input">
				@Html.RadioButtonFor(m => m.MemberModel.Race, "Malay", new { id = "radMemberRaceMalay", name = "race", Checked = "checked" })
				@Html.Label("radMemberRaceMalay", "Malay")
				@Html.RadioButtonFor(m => m.MemberModel.Race, "Chinese", new { id = "radMemberRaceChinese", name="race" })
				@Html.Label("radMemberRaceChinese", "Chinese")
				@Html.RadioButtonFor(m => m.MemberModel.Race, "Indian", new { id = "radMemberRaceIndian", name = "race" })
				@Html.Label("radMemberRaceIndian", "Indian")
				@Html.RadioButtonFor(m => m.MemberModel.Race, "Others", new { id = "radMemberRaceOthers", name = "race" })
				@Html.Label("radMemberRaceOthers", "Others")
			</div>                
		</div>
		<div class="data-row">
			<div class="data-column-title">
				@Html.LabelFor(m => m.MemberModel.Religion)
			</div>
			<div class="data-column-input">
				@Html.DropDownListFor(m => m.MemberModel.Religion, new List<SelectListItem>{
									new SelectListItem { Text="Islam", Value="ISL" },
									new SelectListItem { Text="Buddhism", Value="BUD" },
									new SelectListItem { Text="Hinduism", Value="HIN" },
									new SelectListItem { Text="Others", Value="OTH" },
				}, "Select Religion", new { id = "ddlMemberReligion" })
			</div>                
		</div>
		<div class="data-row invisible-default" id="warningMemberReligion">
			<div class="data-column-title">
			</div>
			<div class="data-column-input-warning" id="warningMemberReligionMessage">
			</div>
		</div>
		<div class="data-row">
			<div class="data-column-title">
				@Html.LabelFor(m => m.MemberModel.Occupation)
			</div>
			<div class="data-column-input">
				@Html.TextBoxFor(m => m.MemberModel.Occupation, new { id = "txtMemberOccupation", @placeholder = "@Example: Student" })
			</div>               
		</div>
		<div class="data-row invisible-default" id="warningMemberOccupation">
			<div class="data-column-title">
			</div>
			<div class="data-column-input-warning" id="warningMemberOccupationMessage">
			</div>
		</div>
		<div class="data-row">
			<div class="data-column-title">
				@Html.LabelFor(m => m.MemberModel.Address)
			</div>
			<div class="data-column-input">
				@Html.TextBoxFor(m => m.MemberModel.Address, new { id = "txtMemberAddress", @placeholder = "@Example: A-03-04 Jalan Satu, Taman Baru." })
			</div>
		</div>
		<div class="data-row invisible-default" id="warningMemberAddress">
			<div class="data-column-title">
			</div>
			<div class="data-column-input-warning" id="warningMemberAddressMessage">
			</div>
		</div>
		<div class="data-row">
			<div class="data-column-title">
				@Html.LabelFor(m => m.MemberModel.PostalCode)
			</div>
			<div class="data-column-input">
				@Html.TextBoxFor(m => m.MemberModel.PostalCode, new { id = "txtMemberPostalCode", @placeholder = "@Example: 99999" })
			</div>                
		</div>
		<div class="data-row invisible-default" id="warningMemberPostalCode">
			<div class="data-column-title">
			</div>
			<div class="data-column-input-warning" id="warningMemberPostalCodeMessage">
			</div>
		</div>
		<div class="data-row">
			<div class="data-column-title">
				@Html.LabelFor(m => m.MemberModel.State)
			</div>
			<div class="data-column-input">
				@Html.DropDownListFor(m => m.MemberModel.State, new List<SelectListItem>{
									new SelectListItem { Text="Johor", Value="Johor" },
									new SelectListItem { Text="Kedah", Value="Kedah" },
									new SelectListItem { Text="Kelantan", Value="Kelantan" },
									new SelectListItem { Text="Kuala Lumpur", Value="Kuala Lumpur"},
									new SelectListItem { Text="Melaka", Value="Melaka" },
									new SelectListItem { Text="Pahang", Value="Pahang" },
									new SelectListItem { Text="Penang", Value="Penang" },
									new SelectListItem { Text="Perak", Value="Perak" },
									new SelectListItem { Text="Perlis", Value="Perlis" },
									new SelectListItem { Text="Sabah", Value="Sabah" },
									new SelectListItem { Text="Sarawak", Value="Sarawak" },
									new SelectListItem { Text="Selangor", Value="Selangor" },
									new SelectListItem { Text="Seremban", Value="Seremban" },
									new SelectListItem { Text="Terengganu", Value="Terengganu" }
				}, "Select State", new { id = "ddlMemberState" })
			</div>
		</div>
		<div class="data-row invisible-default" id="warningMemberState">
			<div class="data-column-title">
			</div>
			<div class="data-column-input-warning" id="warningMemberStateMessage">
			</div>
		</div>
		<div class="data-row">
			<div class="data-column-title">
				@Html.LabelFor(m => m.MemberModel.Country)
			</div>
			<div class="data-column-input">
				@Html.DropDownListFor(m => m.MemberModel.Country, new List<SelectListItem>{
									new SelectListItem { Text="Malaysia", Value="Malaysia" },
									//new SelectListItem { Text="Singapore", Value="Singapore" },
									//new SelectListItem { Text="Thailand", Value="Thailand" },
				}, "Select Country", new { id = "ddlMemberCountry" })
			</div>                
		</div>
		<div class="data-row invisible-default" id="warningMemberCountry">
			<div class="data-column-title">
			</div>
			<div class="data-column-input-warning" id="warningMemberCountryMessage">
			</div>
		</div>
		<div class="data-row">
			<div class="data-column-title">
				@Html.LabelFor(m => m.MemberModel.PhoneNo)
			</div>
			<div class="data-column-input">
				@Html.TextBoxFor(m => m.MemberModel.PhoneNo, new { @id = "txtMemberPhoneNo", @placeholder = "@Example: 012-1234567" })
			</div>
		</div>
		<div class="data-row invisible-default" id="warningMemberPhoneNo">
			<div class="data-column-title">
			</div>
			<div class="data-column-input-warning" id="warningMemberPhoneNoMessage">
			</div>
		</div>
		<div class="data-row">
			<div class="data-column-title">
				@Html.LabelFor(m => m.MemberModel.IsSubscribeLatestNews)
			</div>
			<div class="data-column-input">
				@Html.CheckBoxFor(m => m.MemberModel.IsSubscribeLatestNewsValue, new { id = "chkIsSubscribeLatestNews" })
			</div>
		</div>
		<br />
		<hr />
		<div class="data-row">
			<div class="data-column-title">
				@Html.LabelFor(m => m.LoginModel.UserName)
			</div>
			<div class="data-column-input">
				@Html.TextBoxFor(m => m.LoginModel.UserName, new { id="txtUserName", @placeholder = "@Example: abc123@hotmail.com" })
			</div>
		</div>
		<div class="data-row invisible-default" id="warningUserName">
			<div class="data-column-title">
			</div>
			<div class="data-column-input-warning" id="warningUserNameMessage">
			</div>
		</div>
		<div class="data-row">
			<div class="data-column-title">
				@Html.LabelFor(m => m.LoginModel.Password)
			</div>
			<div class="data-column-input">
				@Html.PasswordFor(m => m.LoginModel.Password, new { id="txtUserPassword", @placeholder = "@Example: Password" })
			</div>
		</div>
		<div class="data-row invisible-default" id="warningUserPassword">
			<div class="data-column-title">
			</div>
			<div class="data-column-input-warning" id="warningUserPasswordMessage">
			</div>
		</div>
		<div class="data-row">
			<div class="data-column-title">
				@Html.LabelFor(m => m.LoginModel.ConfirmPassword)
			</div>
			<div class="data-column-input">
				@Html.PasswordFor(m => m.LoginModel.ConfirmPassword, new { id = "txtUserConfirmPassword", @placeholder = "@Example: Password" })
			</div>
		</div>
		<div class="data-row invisible-default" id="warningUserConfirmPassword">
			<div class="data-column-title">
			</div>
			<div class="data-column-input-warning" id="warningUserConfirmPasswordMessage">
			</div>
		</div>
	</div>
	<input type="button" id="btnRegisterMember" value="Register" />
</fieldset>
@*@Html.AntiForgeryToken()*@

<style type="text/css">
	input[type=radio] {
		width: auto;
		margin-right: 10px;
		float: left;
	}
	input[type=radio] + label {
		width:auto;
		float: left;
		margin-right:20px;
	}
	input[type=text]{
		margin:0px;
	}
	input[type=password]{
		margin:0px;
	}	 
	::-webkit-input-placeholder { color:#8a8a8a; }
	::-moz-placeholder { color:#8a8a8a; } /* firefox 19+ */
	:-ms-input-placeholder { color:#8a8a8a; } /* ie */
	input:-moz-placeholder { color:#8a8a8a; } 
	.invisible-default{
		display:none;
	}
	/*ENd of Common*/

	.register-form{
		font-size:14px;
		font-family:'Segoe UI'
	}
	.data-row{
		position:relative;
		width:100%;
		height:35px;
	}
	.data-column-title{
		width:30%;
		position:relative;
		float:left;
		padding:1px 0px;
	}
	.data-column-input{
		width:70%;
		position:relative;
		float:left;
		padding:1px 0px;
	}
	.data-column-input-warning {
		width: 70%;
		position: relative;
		float: left;
		padding: 1px 0px;
		color:red;
		font-size:12px;
	}
</style>

<script type="text/javascript">

	var jObjectMemberName = $('#txtMemberName');
	var jObjectMemberIcPassport = $('#txtMemberIcPassport');
	var jObjectMemberDob = $('#txtMemberDob');
	var jObjectMemberOccupation = $('#txtMemberOccupation');
	var jObjectMemberAddress = $('#txtMemberAddress');
	var jObjectMemberPostalCode = $('#txtMemberPostalCode');
	var jObjectMemberPhoneNo = $('#txtMemberPhoneNo');
	var jObjectMemberGender = $('input[name="MemberModel.Gender"]:checked');
	var jObjectMemberRace = $('input[name="MemberModel.Race"]:checked');
	var jObjectMemberReligion = $('#ddlMemberReligion');
	var jObjectMemberState = $('#ddlMemberState');
	var jObjectMemberCountry = $('#ddlMemberCountry');
	var jObjectMemberIsSubscribeLatestNews = $('#chkIsSubscribeLatestNews');
	var jObjectUserName = $('#txtUserName');
	var jObjectUserPassword = $('#txtUserPassword');
	var jObjectUserConfirmPassword = $('#txtUserConfirmPassword');

	//Bind with Jquery UI/Plugins
	$("#txtMemberDob").mask("99/99/9999", { clearIfNotMatch: true });
	$("#txtMemberDob").datepicker();//"option", "showAnim", "blind");//{ minDate: -20, maxDate: "+1M +10D" });
	$("#txtMemberIcPassport").mask('999999-99-9999');

	//Event Bindings
	jObjectMemberName.keyup(validateMemberName);
	jObjectMemberIcPassport.keyup(validateMemberIcPassport);
	jObjectMemberDob.change(validateMemberDob);
	jObjectMemberOccupation.keyup(validateMemberOccupation);
	jObjectMemberAddress.keyup(validateMemberAddress);
	jObjectMemberPostalCode.keyup(validateMemberPostalCode);
	jObjectMemberPhoneNo.keyup(validateMemberPhoneNo);
	jObjectMemberReligion.change(validateMemberReligion);
	jObjectMemberState.change(validateMemberState);
	jObjectMemberCountry.change(validateMemberCountry);
	jObjectUserName.keyup(validateUserName);
	jObjectUserPassword.keyup(validateUserPassword);
	jObjectUserConfirmPassword.keyup(validateUserConfirmPassword);

	function validateMemberName(e) {
		if (e.target.value)
			$('#warningMemberName').fadeOut('slow');
	}
	function validateMemberIcPassport(e) {
		if (e.target.value)
			$('#warningMemberIcPassport').fadeOut('slow');
	}
	function validateMemberDob(e) {
		if (e.target.value)
			$('#warningMemberDob').fadeOut('slow');
	}
	function validateMemberOccupation(e) {
		if (e.target.value)
			$('#warningMemberOccupation').fadeOut('slow');
	}
	function validateMemberAddress(e) {
		if (e.target.value)
			$('#warningMemberAddress').fadeOut('slow');
	}
	function validateMemberPostalCode(e) {
		if (e.target.value)
			$('#warningMemberPostalCode').fadeOut('slow');
	}
	function validateMemberPhoneNo(e) {
		if (e.target.value)
			$('#warningMemberPhoneNo').fadeOut('slow');
	}
	function validateMemberReligion() {
		if (this.value)
			$('#warningMemberReligion').fadeOut('slow');
	}
	function validateMemberState() {
		if (this.value)
			$('#warningMemberState').fadeOut('slow');
	}
	function validateMemberCountry() {
		if (this.value)
			$('#warningMemberCountry').fadeOut('slow');
	}
	function validateUserName(e) {
		if (e.target.value)
			$('#warningUserName').fadeOut('slow');
	}
	function validateUserPassword(e) {
		if (e.target.value)
			$('#warningUserPassword').fadeOut('slow');
	}
	function validateUserConfirmPassword(e) {
		if (e.target.value)
			$('#warningUserConfirmPassword').fadeOut('slow');
	}


	$('#btnRegisterMember').click(function () {

		var memberName = jObjectMemberName.val();
		var memberIcPassport = jObjectMemberIcPassport.val();
		var memberDob = jObjectMemberDob.val();
		var memberOccupation = jObjectMemberOccupation.val();
		var memberAddress = jObjectMemberAddress.val();
		var memberPostalCode = jObjectMemberPostalCode.val();
		var memberPhoneNo = jObjectMemberPhoneNo.val();
		var memberGender = jObjectMemberGender.val();
		var memberRace = jObjectMemberRace.val();
		var memberReligion = jObjectMemberReligion.val();
		var memberState = jObjectMemberState.val();
		var memberCountry = jObjectMemberCountry.val();
		var memberIsSubscribeLatestNews = jObjectMemberIsSubscribeLatestNews.is(":checked");
		var userName = jObjectUserName.val();
		var userPassword = jObjectUserPassword.val();
		var userConfirmPassword = jObjectUserConfirmPassword.val();
				
		var newMember = {};
		@*newMember.MemberId = @Model.MemberModel.MemberId;*@
		newMember.Name = memberName;
		newMember.Ic_Passport = memberIcPassport;
		newMember.Dob = memberDob;
		newMember.Occupation = memberOccupation;
		newMember.Address = memberAddress;
		newMember.PostalCode = memberPostalCode;
		newMember.PhoneNo = memberPhoneNo;
		newMember.Gender = memberGender;
		newMember.Race = memberRace;
		newMember.Religion = memberReligion;
		newMember.State = memberState;
		newMember.Country = memberCountry;
		newMember.IsSubscribeLatestNewsValue = memberIsSubscribeLatestNews;

		var newUser = {};
		newUser.UserName = userName;
		newUser.Password = userPassword;
		newUser.ConfirmPassword = userConfirmPassword;

		if (!validateMemberDetails(newMember) || !validateUserDetails(newUser)) {
			return;
		}

		var newUserMember = {};
		newUserMember.MemberModel = newMember;
		newUserMember.LoginModel = newUser;

		var stringUserMember = JSON.stringify(newUserMember);
		var registerUserMemberInput = { model: stringUserMember };
		ny.ajaxPost('/Account/Register', registerUserMemberInput);
	});

	function validateMemberDetails(member) {
		var passValidation = true;

		//if(!member.MemberId){
		//	promptWarningMessage('Member ID can not be found.');
		//	passValidation = false;
		//}
		if (!member.Name) {
			$('#warningMemberNameMessage').text('Member Name can not be empty.');
			$('#warningMemberName').show();

			passValidation = false;
		}
		if (!member.Ic_Passport) {
			$('#warningMemberIcPassportMessage').text('IC/Passport can not be empty.');
			$('#warningMemberIcPassport').show();

			passValidation = false;
		}
		if (!member.Dob) {
			$('#warningMemberDobMessage').text('Date of Birthday can not be empty.');
			$('#warningMemberDob').show();

			passValidation = false;
		}
		if (!member.Address) {
			$('#warningMemberAddressMessage').text('Address can not be empty.');
			$('#warningMemberAddress').show();

			passValidation = false;
		}
		if (!member.PostalCode) {
			$('#warningMemberPostalCodeMessage').text('Postal Code can not be empty.');
			$('#warningMemberPostalCode').show();

			passValidation = false;
		}
		if (!member.State) {
			$('#warningMemberStateMessage').text('State can not be empty.');
			$('#warningMemberState').show();

			passValidation = false;
		}
		if (!member.Country) {
			$('#warningMemberCountryMessage').text('Country can not be empty.');
			$('#warningMemberCountry').show();

			passValidation = false;
		}
		if (!member.PhoneNo) {
			$('#warningMemberPhoneNoMessage').text('Phone Number can not be empty.');
			$('#warningMemberPhoneNo').show();

			passValidation = false;
		}
		if (!member.Religion) {
			$('#warningMemberReligionMessage').text('Religion can not be empty.');
			$('#warningMemberReligion').show();

			passValidation = false;
		}

		return passValidation;
	}

	function validateUserDetails(user) {
		var passValidation = true;

		if (!user.UserName) {
			$('#warningUserNameMessage').text('Username can not be empty.');
			$('#warningUserName').show();
			passValidation = false;
		}

		if (!user.Password) {
			$('#warningUserPasswordMessage').text('Password can not be empty.');
			$('#warningUserPassword').show();
			passValidation = false;
		}
		else if (user.Password.length < 6) {
			$('#warningUserPasswordMessage').text('Password must consist of 6 characters.');
			$('#warningUserPassword').show();
			passValidation = false;
		}

		if (!user.ConfirmPassword) {
			$('#warningUserConfirmPasswordMessage').text('Confirm Pasword can not be empty.');
			$('#warningUserConfirmPassword').show();
			passValidation = false;
		}

		if (passValidation && user.Password != user.ConfirmPassword) {
			$('#warningUserConfirmPasswordMessage').text('Password and Confirm Pasword do not match.');
			$('#warningUserConfirmPassword').show();
			passValidation = false;
		}

		return passValidation;
	}

</script>