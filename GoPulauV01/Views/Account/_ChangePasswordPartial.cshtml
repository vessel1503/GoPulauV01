@model GoPulauV01.Models.CustomMemberUpdateModel

<h3>Change password</h3>
@*@Html.AntiForgeryToken()*@
@*@Html.ValidationSummary()*@

<fieldset>
	<legend>Change Password Form</legend>
	@Html.HiddenFor(m => m.MemberModel.MemberId)
	<div>
		<div class="data-row">
			<div class="data-column-title-password">
				@Html.LabelFor(m => m.localPasswordModel.OldPassword)
			</div>
			<div class="data-column-input-password">
				@Html.PasswordFor(m => m.localPasswordModel.OldPassword, new { id = "txtMemberOldPassword" })
			</div>
		</div>
		<div class="data-row invisible-default" id="warningOldPassword">
			<div class="data-column-title-password">
			</div>
			<div class="data-column-input-warning-password" id="warningOldPasswordMessage">
			</div>
		</div>
		<div class="data-row">
			<div class="data-column-title-password">
				@Html.LabelFor(m => m.localPasswordModel.NewPassword)
			</div>
			<div class="data-column-input-password">
				@Html.PasswordFor(m => m.localPasswordModel.NewPassword, new { id = "txtMemberNewPassword" })
			</div>
		</div>
		<div class="data-row invisible-default" id="warningNewPassword">
			<div class="data-column-title-password">
			</div>
			<div class="data-column-input-warning-password" id="warningNewPasswordMessage">
			</div>
		</div>
		<div class="data-row">
			<div class="data-column-title-password">
				@Html.LabelFor(m => m.localPasswordModel.ConfirmPassword)
			</div>
			<div class="data-column-input-password">
				@Html.PasswordFor(m => m.localPasswordModel.ConfirmPassword, new { id = "txtMemberConfirmPassword" })
			</div>
		</div>
		<div class="data-row invisible-default" id="warningConfirmPassword">
			<div class="data-column-title-password">
			</div>
			<div class="data-column-input-warning-password" id="warningConfirmPasswordMessage">
			</div>
		</div>
	</div>
	<input type="button" id="btnUpdateMemberPassword" value="Change password" />
</fieldset>
<script type="text/javascript">

	var jObjectOldPassword = $('#txtMemberOldPassword');
	var jObjectNewPassword = $('#txtMemberNewPassword');
	var jObjectConfirmPassword = $('#txtMemberConfirmPassword');

	//Event Bindings
	jObjectOldPassword.keyup(validateOldPassword);
	jObjectNewPassword.keyup(validateNewPassword);
	jObjectConfirmPassword.keyup(validateConfirmPassword);

	function validateOldPassword(e) {
		if (e.target.value)
			$('#warningOldPassword').fadeOut('slow');
	}
	function validateNewPassword(e) {
		if (e.target.value)
			$('#warningNewPassword').fadeOut('slow');
	}
	function validateConfirmPassword(e) {
		if (e.target.value)
			$('#warningConfirmPassword').fadeOut('slow');
	}

	$('#btnUpdateMemberPassword').click(function () {

    	var memberOldPassword = jObjectOldPassword.val();
    	var memberNewPassword = jObjectNewPassword.val();
    	var memberConfirmPassword = jObjectConfirmPassword.val();
				
		var memberPasswordModel = {};
		memberPasswordModel.OldPassword = memberOldPassword;
		memberPasswordModel.NewPassword = memberNewPassword;
		memberPasswordModel.ConfirmPassword = memberConfirmPassword;

		if (!validatePasswords(memberPasswordModel)) {
			return;
		}

		var stringMemberPassword = JSON.stringify(memberPasswordModel);
		var updatedMemberPassword = { model : stringMemberPassword };
		ny.ajaxPost('/Account/UpdateMemberPassword', updatedMemberPassword);
	});

	function validatePasswords(memberPasswordModel) {
		var passValidation = true;

		if (!memberPasswordModel.OldPassword) {
			$('#warningOldPasswordMessage').text('Current Password can not be empty.');
			$('#warningOldPassword').show();
			passValidation = false;
		}

		if (!memberPasswordModel.NewPassword) {
			$('#warningNewPasswordMessage').text('New Pasword can not be empty.');
			$('#warningNewPassword').show();
			passValidation = false;
		}
		else if (memberPasswordModel.NewPassword.length < 6) {
			$('#warningNewPasswordMessage').text('New Password must consist of 6 characters.');
			$('#warningNewPassword').show();
			passValidation = false;
		}

		if (!memberPasswordModel.ConfirmPassword) {
			$('#warningConfirmPasswordMessage').text('Confirm Password can not be empty.');
			$('#warningConfirmPassword').show();
			passValidation = false;
		}

		if (passValidation && (memberPasswordModel.NewPassword != memberPasswordModel.ConfirmPassword)) {
			$('#warningConfirmPasswordMessage').text('New Password and Confirm Pasword do not match.');
			$('#warningConfirmPassword').show();
			passValidation = false;
		}

		return passValidation;

	}

</script>

<style type="text/css">
	
	input[type=text] {
		margin: 0px;
	}

	input[type=password] {
		margin: 0px;
	}
	::-webkit-input-placeholder { color:#8a8a8a; }
	::-moz-placeholder { color:#8a8a8a; } /* firefox 19+ */
	:-ms-input-placeholder { color:#8a8a8a; } /* ie */
	input:-moz-placeholder { color:#8a8a8a; }

	.invisible-default {
		display: none;
	}
	/*ENd of Common*/

	/*.member-update-form {
		font-size: 14px;
		font-family: 'Segoe UI';
	}*/

	.data-row {
		position: relative;
		width: 100%;
		height: 30px;
	}

	.data-column-title-password {
		width: 40%;
		position: relative;
		float: left;
		padding: 1px 0px;
	}

	.data-column-input-password {
		width: 60%;
		position: relative;
		float: left;
		padding: 1px 0px;
	}

	.data-column-input-warning-password {
		width: 60%;
		position: relative;
		float: left;
		padding: 1px 0px;
		color: red;
		font-size: 12px;
	}
</style>